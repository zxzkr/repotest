{"version":3,"sources":["page/UpperPage.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","cardRoot","maxWidth","gridList","transform","UpperPage","classes","useState","outcome","data","setState","useEffect","a","axios","result","fetchData","className","GridList","cellHeight","cols","map","item","Card","CardContent","Typography","color","gutterBottom","name","variant","component","style","margin","src","url","height","alt","value","CardActions","href","link","Button","size","flexGrow","searchRoot","spacing","width","bullet","menuButton","marginRight","title","App","props","query","setQuery","search","setSearch","AppBar","position","background","Toolbar","IconButton","edge","aria-label","align","Date","toLocaleTimeString","key","noValidate","autoComplete","TextField","id","label","type","onChange","event","target","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.17adc63b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Card, CardContent, CardActions } from '@material-ui/core';\nimport { GridList } from '@material-ui/core';\n\nimport { Typography } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n  },\n  cardRoot: {\n    maxWidth: 275,\n  },\n  gridList: {\n    flexWrap: 'nowrap',\n    transform: 'translateZ(0)',\n  }\n}));\n\nfunction UpperPage() {\n    const classes = useStyles();\n    const [ data, setState ] = useState({outcome:[]})\n    \n    const url = 'http://k8s-default-backendi-6566bc7d31-268214277.ap-northeast-2.elb.amazonaws.com/services/all'\n    \n    useEffect(() => {\n      const fetchData = async () => {\n        const result = await axios(\n          url,\n        );\n        setState(result.data);\n      };\n      \n      fetchData();\n    }, []);\n  \n    \n    return (\n      <div className={classes.root}>\n        <GridList cellHeight={300} className={classes.gridList} cols={2}>\n          {data.outcome.map( item => (\n          <div>\n            <Card className={classes.cardRoot}>        \n              <CardContent>\n                <Typography color=\"textSecondary\" gutterBottom>\n                  {item.name} \n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                  <img \n                    style={{ display: 'block', margin: '0px auto' }}\n                    src={item.url}\n                    height='120'\n                    alt={item.name}\n                  />\n                  <br/>\n                  {item.value}\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <a href={item.link}>\n                  <Button size=\"small\"> See More </Button>\n                </a>\n              </CardActions>\n            </Card>\n          </div>\n          ))}\n        </GridList>\n      </div>\n    )\n}\n\nexport default UpperPage;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport UpperPage from './page/UpperPage'\nimport axios from 'axios';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\nimport { Button, IconButton } from '@material-ui/core';\nimport CloudIcon from '@material-ui/icons/Cloud';\nimport TextField from '@material-ui/core/TextField';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  searchRoot: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App(props) {\n  const classes = useStyles();\n  // const { sections } = props;\n  const [ data, setState ] = useState({outcome: []});\n  const [query, setQuery] = useState('aws');\n  const [search, setSearch] = useState('aws');\n\n  var url = `https://k8s-default-backendi-6566bc7d31-268214277.ap-northeast-2.elb.amazonaws.com/contents/${search}`\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(url);\n      setState(result.data);\n    };\n    fetchData();\n    // eslint-disable-next-line\n  }, [search]);\n  \n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" style={{ background: '#2E3B55' }}>\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <CloudIcon />\n          </IconButton>\n          <Typography\n            variant=\"h6\"\n            align=\"center\"\n            className={classes.title}\n          >\n            EKS DEMO Blog\n          </Typography>\n          {new Date().toLocaleTimeString()}\n        </Toolbar>\n      </AppBar>\n      <br/>\n\n      <UpperPage key={1} />\n      <br/>\n      \n      <form className={classes.searchRoot} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"standard-basic\"\n          label=\"Enter your keyword to search\"\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <Button onClick={() => setSearch(query)}> Click </Button>\n      </form>\n      <ul>\n      {data.outcome.map( item => (\n        <li key={item.url}>\n          <a href={item.url}>{item.title}</a><br/>\n        </li>\n      ))}\n      </ul>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  sections: PropTypes.array,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}